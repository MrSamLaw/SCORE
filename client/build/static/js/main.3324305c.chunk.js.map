{"version":3,"sources":["utils/auth.js","components/Nav/index.jsx","utils/mutations.js","pages/Login.jsx","pages/Signup.jsx","components/CompetitorList/index.jsx","utils/queries.js","pages/Home.jsx","components/QualifyList/index.jsx","pages/Round.jsx","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","Nav","className","to","Auth","loggedIn","onClick","e","preventDefault","logout","LOGIN_USER","gql","ADD_USER","Login","props","useState","username","password","formState","setFormState","useMutation","login","error","data","handleChange","event","target","name","value","handleFormSubmit","a","console","log","variables","onSubmit","placeholder","type","onChange","style","cursor","message","Signup","email","addUser","CompetitorList","competitors","length","map","competitor","carNo","firstName","lastName","_id","QUERY_COMPETITORS","Home","useQuery","loading","QualifyList","qualifiers","qualOne","qualTwo","round","qualifier","Round","currentSection","setCurrentSection","handleSectionChange","section","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3324305c.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    getProfile() {\n        return decode(this.getToken());\n    }\n\n    loggedIn() {\n        const token = this.getToken();\n        // If there is a token and it's not expired, return `true`\n        return token && !this.isTokenExpired(token) ? true : false;\n    }\n\n    isTokenExpired(token) {\n        // Decode the token to get its expiration time that was set by the server\n        const decoded = decode(token);\n        // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n        if (decoded.exp < Date.now() / 1000) {\n            localStorage.removeItem('id_token');\n            return true;\n        }\n        // If token hasn't passed its expiration time, return `false`\n        return false;\n    }\n\n    getToken() {\n        return localStorage.getItem('id_token');\n    }\n\n    login(idToken) {\n        localStorage.setItem('id_token', idToken);\n        window.location.assign('/');\n    }\n\n    logout() {\n        localStorage.removeItem('id_token');\n        window.location.reload();\n    }\n}\n\nexport default new AuthService();\n","import { Link } from \"react-router-dom\";\nimport \"./nav.scss\";\n\nimport Auth from \"../../utils/auth\";\n\nexport default function Nav() {\n  const logout = (e) => {\n    e.preventDefault();\n    Auth.logout();\n  };\n  return (\n    <section className=\"navbar\">\n      <div className=\"wrapper\">\n        <div className=\"left\">\n          <ul>\n            <li className=\"logo\">\n              <Link to=\"/\">\n                <h1>SCORE!!!</h1>\n              </Link>\n            </li>\n          </ul>\n        </div>\n        <div className=\"right\">\n          {Auth.loggedIn() ? (\n            <button onClick={logout}>Logout</button>\n          ) : (\n            <ul>\n              <li>\n                <Link to=\"/login\">Login</Link>\n              </li>\n              <li>\n                <Link to=\"/signup\">Signup</Link>\n              </li>\n            </ul>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n    mutation login($username:String!, $password:String!) {\n        login(username:$username, password:$password){\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ username: \"\", password: \"\" });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      username: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <main>\n      <div>\n        <div>\n          <h4>Login</h4>\n          <div>\n            {data ? (\n              <p>\n                Success! You may now head{\" \"}\n                <Link to=\"/\">back to the homepage.</Link>\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Username\"\n                  name=\"username\"\n                  type=\"username\"\n                  value={formState.username}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"******\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: \"pointer\" }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n    const [formState, setFormState] = useState({\n        username: '',\n        email: '',\n        password: '',\n    });\n    const [addUser, { error, data }] = useMutation(ADD_USER);\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n        console.log(formState);\n\n        try {\n            const { data } = await addUser({\n                variables: { ...formState },\n            });\n\n            Auth.login(data.addUser.token);\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    return (\n        <main className=\"flex-row justify-center mb-4\">\n            <div className=\"col-12 col-lg-10\">\n                <div className=\"card\">\n                    <h4 className=\"card-header bg-dark text-light p-2\">Sign Up</h4>\n                    <div className=\"card-body\">\n                        {data ? (\n                            <p>\n                                Success! You may now head{' '}\n                                <Link to=\"/\">back to the homepage.</Link>\n                            </p>\n                        ) : (\n                            <form onSubmit={handleFormSubmit}>\n                                <input\n                                    className=\"form-input\"\n                                    placeholder=\"Your username\"\n                                    name=\"username\"\n                                    type=\"text\"\n                                    value={formState.name}\n                                    onChange={handleChange}\n                                />\n                                <input\n                                    className=\"form-input\"\n                                    placeholder=\"Your email\"\n                                    name=\"email\"\n                                    type=\"email\"\n                                    value={formState.email}\n                                    onChange={handleChange}\n                                />\n                                <input\n                                    className=\"form-input\"\n                                    placeholder=\"******\"\n                                    name=\"password\"\n                                    type=\"password\"\n                                    value={formState.password}\n                                    onChange={handleChange}\n                                />\n                                <button\n                                    className=\"btn btn-block btn-primary\"\n                                    style={{ cursor: 'pointer' }}\n                                    type=\"submit\"\n                                >\n                                    Submit\n                                </button>\n                            </form>\n                        )}\n\n                        {error && (\n                            <div className=\"my-3 p-3 bg-danger text-white\">\n                                {error.message}\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </main>\n    );\n};\n\nexport default Signup;\n","import \"./competitorlist.scss\";\n\nconst CompetitorList = ({ competitors }) => {\n  console.log(competitors);\n  if (!competitors.length) {\n    return <h3>No Registered Competitors Yet</h3>;\n  }\n\n  return (\n    <div>\n      {competitors &&\n        competitors.map((competitor) => (\n          <div key={competitor._id} className=\"card\">\n            <div className=\"left\">\n              <p className=\"carNo\">{competitor.carNo}</p>\n            </div>\n            <div className=\"right\">\n              <p>{competitor.firstName}</p>\n              <p>{competitor.lastName}</p>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CompetitorList;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_COMPETITORS = gql`\n    query getCompetitors {\n        competitors {\n            _id\n            firstName\n            lastName\n            carNo\n            class\n        }\n    }\n`;\n\nexport const QUERY_SINGLE_ROUND = gql`\n    query getSingleRound($roundId: ID!) {\n        round(roundId: $roundId) {\n            _id\n            season\n            qualifiers {\n                _id\n            }\n        }\n    }\n`;\n\nexport const QUERY_QUALIFY = gql`\n    query getQualify($roundNo:roundNo) {\n        qualify(round: $round) {\n            _id\n            qualOne\n            qualTwo\n            competitor {\n                _id\n                firstName\n                lastName\n                carNo\n            }\n            round {\n                _id\n                roundNo\n                \n            }\n        }\n    }\n`;","import { useQuery } from \"@apollo/client\";\nimport CompetitorList from \"../components/CompetitorList\";\nimport { QUERY_COMPETITORS } from \"../utils/queries\";\nimport \"./home.scss\";\n\nexport default function Home() {\n  const { loading, data } = useQuery(QUERY_COMPETITORS);\n  const competitors = data?.competitors || [];\n\n  return (\n    <main className=\"sections\">\n      Home Section\n      <div className=\"container\">\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <CompetitorList competitors={competitors} />\n        )}\n      </div>\n    </main>\n  );\n}\n","import \"./qualifyList.scss\";\n\nconst QualifyList = ({ qualifiers, qualOne, qualTwo, competitor, round }) => {\n  console.log(qualifiers);\n  if (!qualifiers.length) {\n    return <h3>No Competitors are entered in this round</h3>;\n  }\n\n  return (\n    <div>\n      {qualifiers &&\n        qualifiers.map((qualifier) => (\n          <div key={qualifier._id} className=\"card\">\n            EMPTY\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default QualifyList;\n","import \"./round.scss\";\n\nimport { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport CompetitorList from \"../components/CompetitorList\";\nimport { QUERY_COMPETITORS, QUERY_QUALIFY } from \"../utils/queries\";\nimport QualifyList from \"../components/QualifyList\";\n\nexport default function Round() {\n  const [currentSection, setCurrentSection] = useState(\"Competitors\");\n  const { data } = useQuery(QUERY_COMPETITORS);\n  const competitors = data?.competitors || [];\n\n  //   const { data2 } = useQuery(QUERY_QUALIFY);\n  //   const qualifiers = data2?.qualifiers || [];\n\n  const renderSection = () => {\n    if (currentSection === \"Competitors\") {\n      return <CompetitorList competitors={competitors} />;\n    }\n    if (currentSection === \"Qualifying\") {\n      console.log(\"Qualifying\");\n      return <QualifyList />; // qualifiers={qualifiers}\n    }\n    if (currentSection === \"Battles\") {\n      console.log(\"Battles\"); //   return <Battles />;\n    }\n  };\n\n  const handleSectionChange = (section) => setCurrentSection(section);\n\n  return (\n    <main>\n      Round Section\n      <div className=\"sectionNav\">\n        <ul>\n          <li\n            className={\"Competitors\" ? \"section-link active\" : \"section-link\"}\n            onClick={() => handleSectionChange(\"Competitors\")}\n          >\n            Competitors\n          </li>\n          <li\n            className={\"Qualifying\" ? \"section-link active\" : \"section-link\"}\n            onClick={() => handleSectionChange(\"Qualifying\")}\n          >\n            Qualifying\n          </li>\n          <li\n            className={\"Battles\" ? \"section-link active\" : \"section-link\"}\n            onClick={() => handleSectionChange(\"Battles\")}\n          >\n            Battles\n          </li>\n        </ul>\n      </div>\n      <div className=\"roundSections\">{renderSection()}</div>\n    </main>\n  );\n}\n","import \"./App.scss\";\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Nav from './components/Nav';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\n\nimport Home from './pages/Home';\nimport Round from './pages/Round'\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"app\">\n          <Nav />\n          <div className=\"pages\">\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/round\">\n              <Round />\n            </Route>\n\n            <Route exact path=\"/login\">\n              <Login />\n            </Route>\n            <Route exact path=\"/signup\">\n              <Signup />\n            </Route>\n          </div>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}