{"version":3,"sources":["utils/auth.js","components/Nav/index.jsx","utils/mutations.js","components/PageTitle/index.jsx","pages/Login.jsx","pages/Signup.jsx","pages/Home.jsx","utils/queries.js","components/SubTitle/index.jsx","components/RoundForm/index.jsx","components/RoundList/index.jsx","pages/Round.jsx","components/AddToRound/index.jsx","components/QualifyList/index.jsx","pages/SingleRound.jsx","components/CompetitorForm/index.jsx","components/CompetitorList/index.jsx","pages/Competitors.jsx","App.js","serviceWorkerRegistration.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","Nav","className","to","Auth","loggedIn","onClick","e","preventDefault","logout","LOGIN_USER","gql","ADD_USER","ADD_ROUND","ADD_COMPETITOR","ADD_QUALIFIER","ADD_ROUND_QUALIFIERS","PageTitle","heading","Login","props","useState","username","password","formState","setFormState","useMutation","login","error","data","handleChange","event","target","name","value","handleFormSubmit","a","console","log","variables","onSubmit","placeholder","type","onChange","style","cursor","message","Signup","email","addUser","Home","getProfile","QUERY_SEASONS","QUERY_COMPETITORS","QUERY_ROUNDS","QUERY_SINGLE_ROUND","QUERY_ROUND_QUALIFIERS","SubTitle","RoundForm","roundNo","setRoundNo","seasonYear","setSeasonYear","addRound","seasonsData","useQuery","seasons","season","parseInt","map","_id","defaultValue","year","RoundList","rounds","length","round","Round","roundsData","AddToRound","competing","roundId","compData","competitors","setCompetitors","roundCompetitors","setRoundCompetitors","addQualifier","addRoundQualifiers","useEffect","competitor","competitorId","filteredCompetitors","filter","compClick","carNo","firstName","lastName","qualifiers","QualifyList","useParams","setQualifiers","roundQualifiers","L1Click","L2Click","qualifier","SingleRound","currentSection","setCurrentSection","qualifyData","loading","handleSectionChange","section","CompetitorForm","setFirstName","setLastName","setCarNo","addCompetitor","err","CompetitorList","Competitors","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2bf5a15c.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    getProfile() {\n        return decode(this.getToken());\n    }\n\n    loggedIn() {\n        const token = this.getToken();\n        // If there is a token and it's not expired, return `true`\n        return token && !this.isTokenExpired(token) ? true : false;\n    }\n\n    isTokenExpired(token) {\n        // Decode the token to get its expiration time that was set by the server\n        const decoded = decode(token);\n        // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n        if (decoded.exp < Date.now() / 1000) {\n            localStorage.removeItem('id_token');\n            return true;\n        }\n        // If token hasn't passed its expiration time, return `false`\n        return false;\n    }\n\n    getToken() {\n        return localStorage.getItem('id_token');\n    }\n\n    login(idToken) {\n        localStorage.setItem('id_token', idToken);\n        window.location.assign('/');\n    }\n\n    logout() {\n        localStorage.removeItem('id_token');\n        window.location.reload();\n    }\n}\n\nexport default new AuthService();\n","import { Link } from \"react-router-dom\";\nimport \"./nav.scss\";\n\nimport Auth from \"../../utils/auth\";\n\nexport default function Nav() {\n  const logout = (e) => {\n    e.preventDefault();\n    Auth.logout();\n  };\n  return (\n    <section className=\"navbar\">\n      <div className=\"wrapper\">\n        <div className=\"left\">\n          <ul>\n            <li className=\"logo\">\n              <Link to=\"/\">\n                <h1>SCORE!!!</h1>\n              </Link>\n            </li>\n          </ul>\n        </div>\n        <div className=\"right\">\n          {Auth.loggedIn() ? (\n            <ul>\n              {/* <li>\n                <Link to=\"/seasons\">Seasons</Link>\n              </li> */}\n              <li>\n                <Link to=\"/round\">Round</Link>\n              </li>\n              <li>\n                <Link to=\"/competitors\">Competitors</Link>\n              </li>\n              <li onClick={logout}>Logout</li>\n            </ul>\n          ) : (\n            <ul>\n              <li>\n                <Link to=\"/login\">Login</Link>\n              </li>\n              <li>\n                <Link to=\"/signup\">Signup</Link>\n              </li>\n            </ul>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n    mutation login($username:String!, $password:String!) {\n        login(username:$username, password:$password){\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_ROUND = gql`\n  mutation addRound($roundNo: Int!, $season:ID!) {\n    addRound(roundNo: $roundNo, seasonId:$season) {\n      _id\n      roundNo\n      season {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_COMPETITOR = gql`\n  mutation addCompetitor($firstName: String!, $lastName:String!, $carNo:Int) {\n    addCompetitor(firstName: $firstName, lastName:$lastName,carNo:$carNo) {\n      _id\n      firstName\n      lastName\n      carNo\n    }\n  }\n`;\n\nexport const ADD_QUALIFIER = gql`\n  mutation addQualifier($competitor: ID, $round:ID){\n  addQualifier(competitor: $competitor, round:$round){\n      _id\n    }\n    \n  }\n`;\n\nexport const ADD_ROUND_QUALIFIERS = gql`\n  mutation AddRoundQualifiers($roundId:ID, $qualifiers: [ID]){\n    _id\n  }\n`;","import \"./pageTitle.scss\";\n\nexport default function PageTitle({ heading }) {\n  return (\n    <div className=\"pageTitle\">\n      <h1>{heading}</h1>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\nimport PageTitle from \"../components/PageTitle\";\n\nimport \"../form.scss\";\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ username: \"\", password: \"\" });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      username: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <main>\n      <div>\n        <PageTitle heading=\"LOGIN\" />\n        <div className=\"formWrapper\">\n          {data ? (\n            <p>\n              Success! You may now head{\" \"}\n              <Link to=\"/\">back to the homepage.</Link>\n            </p>\n          ) : (\n            <form className=\"form\" onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Username\"\n                name=\"username\"\n                type=\"username\"\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button\n                className=\"btn btn-block btn-primary\"\n                style={{ cursor: \"pointer\" }}\n                type=\"submit\"\n              >\n                Submit\n              </button>\n            </form>\n          )}\n\n          {error && (\n            <div className=\"my-3 p-3 bg-danger text-white\">{error.message}</div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\nimport \"../form.scss\";\nimport PageTitle from \"../components/PageTitle\";\nconst Signup = () => {\n  const [formState, setFormState] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main>\n      <div>\n        <PageTitle heading=\"SIGN-UP\" />\n        <div className=\"formWrapper\">\n          {data ? (\n            <p>\n              Success! You may now head{\" \"}\n              <Link to=\"/\">back to the homepage.</Link>\n            </p>\n          ) : (\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your username\"\n                name=\"username\"\n                type=\"text\"\n                value={formState.name}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button\n                className=\"btn btn-block btn-primary\"\n                style={{ cursor: \"pointer\" }}\n                type=\"submit\"\n              >\n                Submit\n              </button>\n            </form>\n          )}\n\n          {error && (\n            <div className=\"my-3 p-3 bg-danger text-white\">{error.message}</div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import { Link } from \"react-router-dom\";\nimport \"./home.scss\";\n\nimport Auth from \"../utils/auth\";\n\nexport default function Home() {\n  return (\n    <main className=\"sections\">\n      <div className=\"container\">\n        {Auth.loggedIn() ? (\n          <div>\n            <p>\n              What would you like to do today {Auth.getProfile().data.username}?\n            </p>\n          </div>\n        ) : (\n          <div>\n            <p>Welcome to SCORE!!!</p>\n            <p>Please login to admin your competition</p>\n\n            <p>\n              <Link to=\"/login\">LOGIN</Link>\n            </p>\n          </div>\n        )}\n      </div>\n    </main>\n  );\n}\n","import { gql } from '@apollo/client';\n\nexport const QUERY_ME = gql`\nquery me {\n    me{\n        _id\n        username\n    }\n}\n`;\nexport const QUERY_SEASONS = gql`\nquery getSeasons {\n    seasons{\n        _id\n        year\n        archived\n        rounds {\n            _id\n            roundNo\n        }\n    }\n}\n`;\n\nexport const QUERY_COMPETITORS = gql`\n    query getCompetitors {\n        competitors {\n            _id\n            firstName\n            lastName\n            carNo\n            # class\n        }\n    }\n`;\n\nexport const QUERY_ROUNDS = gql`\n    query getRounds {\n        rounds {\n            _id\n            roundNo\n            season {\n                _id\n                year\n            }\n        }\n    }\n`;\n\nexport const QUERY_SINGLE_ROUND = gql`\n    query getSingleRound($roundId: ID!) {\n        round(roundId: $roundId) {\n            _id\n            roundNo\n            season {\n                _id\n                year\n            }\n            qualifiers {\n                _id\n            #     competitors {\n            #         _id\n            #         firstName\n            #         lastName\n            #         carNo\n            #     }\n            }\n            battles {\n                _id\n            }\n        }\n    }\n`;\n\nexport const QUERY_ROUND_QUALIFIERS = gql`\n    query getRoundQualifiers($roundId:ID!){\n        roundQualifiers(roundId:$roundId) {\n            _id\n            roundNo\n            qualifiers{\n                _id\n                competitor {\n                    _id\n                    firstName\n                    lastName\n                    carNo\n                }\n            }\n        }\n    }\n`;\n\nexport const QUERY_QUALIFY = gql`\n    query getQualify($roundNo:roundNo) {\n        qualify(round: $round) {\n            _id\n            qualOne\n            qualTwo\n            competitor {\n                _id\n                firstName\n                lastName\n                carNo\n            }\n            round {\n                _id\n                roundNo\n                \n            }\n        }\n    }\n`;","import \"./subTitle.scss\";\n\nexport default function SubTitle({ heading }) {\n  return (\n    <div className=\"subTitle\">\n      <h4>{heading}</h4>\n    </div>\n  );\n}\n","import { useQuery, useMutation } from \"@apollo/client\";\nimport { useState } from \"react\";\n// import auth from \"../../utils/auth\";\nimport SubTitle from \"../SubTitle\";\nimport { ADD_ROUND } from \"../../utils/mutations\";\nimport { QUERY_SEASONS } from \"../../utils/queries\";\n\nconst RoundForm = () => {\n  const [roundNo, setRoundNo] = useState(\"\");\n  const [seasonYear, setSeasonYear] = useState(\"\");\n  const [addRound] = useMutation(ADD_ROUND);\n  const { data: seasonsData } = useQuery(QUERY_SEASONS);\n  // const { data: compData } = useQuery(QUERY_COMPETITORS);\n  const seasons = seasonsData?.seasons || [];\n  // const competitors = compData?.competitors || [];\n  //   update(cache, { data: { addRound } }) {\n  //     try {\n  //       // const { round } = cache.readQuery({ query: QUERY_SINGLE_ROUND });\n  //       // cache.writeQuery({\n  //       //   query: QUERY_SINGLE_ROUND,\n  //       //   data: { rounds: [addRound, ...round] },\n  //       // });\n  //     } catch (e) {\n  //       console.error(e);\n  //     }\n  //   },\n  // });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(roundNo);\n    console.log(seasonYear);\n    try {\n      const { data } = await addRound({\n        variables: {\n          roundNo: roundNo,\n          season: seasonYear,\n        },\n      });\n      setRoundNo(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === \"roundNo\") {\n      setRoundNo(parseInt(value));\n    }\n  };\n  const handleSeasonChange = (event) => {\n    const { name, value } = event.target;\n    if (name === \"seasonYear\") {\n      setSeasonYear(value);\n    }\n    console.log(value);\n  };\n\n  return (\n    <div>\n      {/* {auth.loggedIn() ? ( */}\n      <div>\n        <SubTitle heading=\"Add a Round\" />\n        <form onSubmit={handleFormSubmit}>\n          <input\n            name=\"roundNo\"\n            placeholder=\"Round Number\"\n            value={roundNo}\n            onChange={handleChange}\n          ></input>\n\n          <select name=\"seasonYear\" onChange={handleSeasonChange}>\n            {seasons.map((season) => (\n              <option\n                key={season._id}\n                value={season._id}\n                defaultValue={{ value: season._id }}\n              >\n                {season.year}\n              </option>\n            ))}\n          </select>\n          {/* <input\n              name=\"roundNoValue\"\n              placeholder=\"00\"\n              value={roundNo}\n              onChange={handleChange}\n            ></input> */}\n          <button type=\"submit\">Add Round</button>\n        </form>\n      </div>\n      {/* ) : (\n        <></>\n      )} */}\n    </div>\n  );\n};\n\n// const RoundForm = () => {\n//   const [formState, setFormState] = useState({\n//     roundNo: \"\",\n//   });\n//   const [addRound] = useMutation(ADD_ROUND, {\n//     variables: { roundNo: formState.roundNo },\n//   });\n\n//   return (\n//     <div>\n//       <form\n//         onSubmit={(e) => {\n//           e.preventDefault();\n//           addRound();\n//         }}\n//       >\n//         <div>\n//           <input\n//             value={formState.roundNo}\n//             onChange={(e) =>\n//               setFormState({ ...formState, roundNo: parseInt(e.target.value) })\n//             }\n//             type=\"text\"\n//             placeholder=\"Round Number\"\n//           />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// };\n\nexport default RoundForm;\n","import { Link } from \"react-router-dom\";\n\nconst RoundList = ({ rounds }) => {\n  if (!rounds.length) {\n    // console.log(rounds);\n    return <h3>No Rounds for this season yet</h3>;\n  }\n  return (\n    <div className=\"wrapper\">\n      {rounds &&\n        rounds.map((round) => (\n          <div key={round._id}>\n            <p>\n              <Link to={`/round/${round._id}`}>Round {round.roundNo}</Link>\n            </p>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default RoundList;\n","import \"./round.scss\";\n\n// import { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_ROUNDS } from \"../utils/queries\";\nimport RoundForm from \"../components/RoundForm\";\nimport RoundList from \"../components/RoundList\";\nimport PageTitle from \"../components/PageTitle\";\n\nexport default function Round() {\n  const { data: roundsData } = useQuery(QUERY_ROUNDS);\n  const rounds = roundsData?.rounds || [];\n  return (\n    <main>\n      <PageTitle heading=\"Rounds\" />\n      <RoundList rounds={rounds} />\n      <RoundForm />\n\n      <hr />\n    </main>\n  );\n}\n","import \"./addToRound.scss\";\n\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { QUERY_COMPETITORS } from \"../../utils/queries\";\nimport { ADD_QUALIFIER, ADD_ROUND_QUALIFIERS } from \"../../utils/mutations\";\n\nconst AddToRound = ({ competing, roundId }) => {\n  const { data: compData } = useQuery(QUERY_COMPETITORS);\n  const [competitors, setCompetitors] = useState([]);\n\n  const [roundCompetitors, setRoundCompetitors] = useState([]);\n  const [addQualifier] = useMutation(ADD_QUALIFIER);\n  const [addRoundQualifiers] = useMutation(ADD_ROUND_QUALIFIERS);\n\n  // if (!competitors.length) {\n  //   return <h3>No Registered Competitors Yet</h3>;\n  // }\n  // console.log(roundId);\n  // console.log(competing);\n  // console.log(roundCompetitors);\n\n  useEffect(() => {\n    setCompetitors(compData?.competitors);\n  }, [compData?.competitors]);\n  //Query Competitors\n\n  // OnClick\n  const compClick = (competitorId) => {\n    // console.log(CompetitorID);\n    //  -> CreateQualifier with Competitor\n    setRoundCompetitors([...roundCompetitors, competitorId]);\n    let filteredCompetitors = competitors.filter(\n      (competitor) => competitor._id !== competitorId\n    );\n    console.log(\"Filtered\");\n    console.log(filteredCompetitors);\n    console.log(\"removed\");\n    console.log(competitorId);\n    setCompetitors(filteredCompetitors);\n    addQualifier({\n      variables: { competitor: competitorId, round: roundId },\n    });\n\n    //  -> AddQualifier to Round\n    //    -> Put Qualifiers into Array\n\n    console.log(roundCompetitors);\n    //    -> Put Array into Round/Qualifiers\n\n    //  -> Remove Competitor from List\n    //  This should be able to be done with a filter below.\n  };\n  const finalClick = () => {\n    console.log(roundId);\n    console.log(roundCompetitors);\n    addRoundQualifiers({\n      variables: {\n        roundId: roundId,\n        qualifiers: roundCompetitors,\n      },\n    });\n  };\n  return (\n    <div>\n      <div>\n        {/* \n      NOT SEEING STATE - Try Ternary\n       */}\n        {competitors &&\n          competitors.map((competitor) => (\n            <div\n              key={competitor._id}\n              className=\"card\"\n              onClick={() => compClick(competitor._id)}\n            >\n              <div className=\"left\">\n                <p className=\"carNo\">{competitor.carNo}</p>\n              </div>\n              <div className=\"right\">\n                <p>{competitor.firstName}</p>\n                <p>{competitor.lastName}</p>\n              </div>\n            </div>\n          ))}\n      </div>\n      <div>\n        <button onClick={() => finalClick()}>Finalise Competitors</button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddToRound;\n","import \"../../form.scss\";\nimport \"./qualifyList.scss\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_ROUND_QUALIFIERS } from \"../../utils/queries\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nconst QualifyList = () => {\n  // console.log(qualifiers);\n\n  const { roundId } = useParams();\n  const { data } = useQuery(QUERY_ROUND_QUALIFIERS, {\n    variables: { roundId: roundId },\n  });\n  const [qualifiers, setQualifiers] = useState([]);\n\n  useEffect(() => {\n    setQualifiers(data?.roundQualifiers.qualifiers);\n  }, [data?.roundQualifiers.qualifiers]);\n\n  // console.log(qualifiers);\n  // if (!qualifiers.length)\n  //   return <h3>No Competitors are entered in this round</h3>;\n\n  const L1Click = async (event) => {\n    event.preventDefault();\n    console.log(\"L1Click\");\n  };\n\n  const L2Click = async (event) => {\n    event.preventDefault();\n    console.log(\"L2Click\");\n  };\n  return (\n    <div>\n      {qualifiers &&\n        qualifiers.map((qualifier) => (\n          <div key={qualifier._id} className=\"card\">\n            <div className=\"left\">\n              <p className=\"carNo\">{qualifier.competitor.carNo}</p>\n            </div>\n            <div className=\"right\">\n              <p>{qualifier.competitor.firstName}</p>\n              <p>{qualifier.competitor.lastName}</p>\n            </div>\n            <div className=\"qScores\">\n              <form onSubmit={L1Click}>\n                <label>Lap 1</label>\n                <input></input>\n                <button type=\"submit\">Confirm</button>\n                {/* Submits qualOne Score  */}\n              </form>\n              <form onSubmit={L2Click}>\n                <label>Lap 2</label>\n                <input></input>\n                <button type=\"submit\">Confirm</button>\n                {/* Submits qualTwo Score  */}\n              </form>\n            </div>\n          </div>\n        ))}\n      <div>\n        <p>\n          This section holds all drivers who haven't completed 2 qualifying laps\n          for judges input, ordered by Marble # (Marble still not configured in\n          models) 2 Onclick buttons? onClick takes parameters\n        </p>\n        {/* <div className=\"card\">\n          <div className=\"left\">\n            <p className=\"carNo\">carNo</p>\n          </div>\n          <div className=\"right\">\n            <p>firstName</p>\n            <p>lastName</p>\n          </div>\n          <div className=\"qScores\">\n            <form>\n              <label>Lap 1</label>\n              <input></input>\n              <button type=\"submit\">Confirm</button>\n              Submits qualOne Score \n            </form>\n            <form>\n              <label>Lap 2</label>\n              <input></input>\n              <button type=\"submit\">Confirm</button>{\" \"}\n              Submits qualTwo Score \n            </form>\n          </div>\n        </div> */}\n      </div>\n      <hr />\n      <div className=\"wrapper\">\n        <button>CLOSE QUALIFYING</button>\n        <p>\n          Allows qualifying to be finalised. Any drivers who haven't completed\n          qualifying will receive null scores and be removed from round.\n        </p>\n      </div>\n      <hr />\n      <section>\n        <p>\n          This section holds list of drivers who have completed qualifying, and\n          orders them according to highest score.\n        </p>\n        <div>\n          <p> Car No - Driver Name - Best - Second - Rank</p>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default QualifyList;\n","import { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { useState } from \"react\";\n\nimport { QUERY_ROUND_QUALIFIERS } from \"../utils/queries\";\nimport { QUERY_SINGLE_ROUND } from \"../utils/queries\";\nimport PageTitle from \"../components/PageTitle\";\nimport SubTitle from \"../components/SubTitle\";\nimport AddToRound from \"../components/AddToRound\";\nimport QualifyList from \"../components/QualifyList\";\n\nconst SingleRound = () => {\n  const [currentSection, setCurrentSection] = useState(\"\");\n  const { roundId } = useParams();\n\n  const { data: qualifyData } = useQuery(QUERY_ROUND_QUALIFIERS, {\n    variables: { roundId: roundId },\n  });\n\n  const qualifiers = qualifyData?.roundQualifiers.qualifiers || [];\n  // console.log(qualifiers);\n  const { loading, data } = useQuery(QUERY_SINGLE_ROUND, {\n    variables: { roundId: roundId },\n  });\n\n  const round = data?.round || {};\n  // console.log(round);\n  const renderSection = () => {\n    if (currentSection === \"Competitors\") {\n      return <AddToRound competing={round} roundId={roundId} />;\n    }\n    if (currentSection === \"Qualifying\") {\n      // console.log(qualifyData);\n      return <QualifyList qualifiers={qualifiers} />;\n    }\n    // if (currentSection === \"Battles\") {\n    //   console.log(\"Battles\"); //   return <Battles />;\n    // }\n  };\n\n  const handleSectionChange = (section) => setCurrentSection(section);\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div>\n      <PageTitle heading=\"Round\" />\n      <p className=\"wrapper\">\n        Round {round.roundNo} of the {round.season.year} Season\n      </p>\n      <div className=\"sectionNav\">\n        <ul>\n          <li\n            className={\"Competitors\" ? \"section-link active\" : \"section-link\"}\n            onClick={() => handleSectionChange(\"Competitors\")}\n          >\n            Add Competitors\n          </li>\n          <li\n            className={\"Qualifying\" ? \"section-link active\" : \"section-link\"}\n            onClick={() => handleSectionChange(\"Qualifying\")}\n          >\n            Qualifying\n          </li>\n          {/* <li\n            className={\"Battles\" ? \"section-link active\" : \"section-link\"}\n            onClick={() => handleSectionChange(\"Battles\")}\n          >\n            Battles\n          </li> */}\n        </ul>\n      </div>\n      <div className=\"roundSections\">{renderSection()}</div>\n\n      {/* <section>\n        <SubTitle heading=\"Edit Round details\" />\n      </section> */}\n    </div>\n  );\n};\nexport default SingleRound;\n","import { useMutation } from \"@apollo/client\";\nimport { useState } from \"react\";\nimport { ADD_COMPETITOR } from \"../../utils/mutations\";\nimport SubTitle from \"../SubTitle\";\n\nexport default function CompetitorForm() {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [carNo, setCarNo] = useState(\"\");\n  const [addCompetitor] = useMutation(ADD_COMPETITOR);\n\n  // const handleChange = (event) => {\n  //   const { name, value } = event.target;\n  // };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      addCompetitor({\n        variables: { firstName, lastName, carNo },\n      });\n      setFirstName(\"\");\n      setLastName(\"\");\n      setCarNo(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div>\n      {/* {auth.loggedIn() ? ( */}\n      <div>\n        <SubTitle heading=\"Register a Competitor\" />\n        <form onSubmit={handleFormSubmit}>\n          <input\n            name=\"firstName\"\n            placeholder=\"First Name\"\n            value={firstName}\n            onChange={(e) => setFirstName(e.target.value)}\n          ></input>\n          <input\n            name=\"lastName\"\n            placeholder=\"Last Name\"\n            value={lastName}\n            onChange={(e) => setLastName(e.target.value)}\n          ></input>\n          <input\n            name=\"carNo\"\n            placeholder=\"Car Number\"\n            value={carNo}\n            onChange={(e) => setCarNo(parseInt(e.target.value))}\n          ></input>\n\n          <button type=\"submit\">SUBMIT</button>\n        </form>\n      </div>\n      {/* ) : (\n            <></>\n          )} */}\n    </div>\n  );\n}\n","import \"./competitorlist.scss\";\n\nconst CompetitorList = ({ competitors }) => {\n  if (!competitors.length) {\n    return <h3>No Registered Competitors Yet</h3>;\n  }\n\n  return (\n    <div onClick={() => console.log(\"Click\")}>\n      {competitors &&\n        competitors.map((competitor) => (\n          <div key={competitor._id} className=\"card\">\n            <div className=\"left\">\n              <p className=\"carNo\">{competitor.carNo}</p>\n            </div>\n            <div className=\"right\">\n              <p>{competitor.firstName}</p>\n              <p>{competitor.lastName}</p>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CompetitorList;\n","import { useQuery } from \"@apollo/client\";\nimport CompetitorForm from \"../components/CompetitorForm\";\nimport CompetitorList from \"../components/CompetitorList\";\nimport PageTitle from \"../components/PageTitle\";\nimport { QUERY_COMPETITORS } from \"../utils/queries\";\nimport \"./home.scss\";\n\nexport default function Competitors() {\n  const { loading, data } = useQuery(QUERY_COMPETITORS);\n  const competitors = data?.competitors || [];\n  console.log(data);\n  return (\n    <main className=\"sections\">\n      <PageTitle heading=\"COMPETITORS\" />\n      <div className=\"compContainer\">\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <CompetitorList competitors={competitors} />\n        )}\n      </div>\n      <hr />\n      <CompetitorForm />\n    </main>\n  );\n}\n","import \"./App.scss\";\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Nav from './components/Nav';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\n\nimport Home from './pages/Home';\n// import Seasons from './pages/Seasons'\nimport Round from './pages/Round'\nimport SingleRound from \"./pages/SingleRound\";\nimport Competitors from \"./pages/Competitors\";\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"app\">\n          <Nav />\n          <div className=\"pages\">\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            {/* <Route exact path=\"/seasons\">\n              <Seasons />\n            </Route> */}\n            <Route exact path=\"/round\">\n              <Round />\n            </Route>\n            <Route exact path=\"/round/:roundId\">\n              <SingleRound />\n            </Route>\n            <Route exact path=\"/competitors\">\n              <Competitors />\n            </Route>\n            <Route exact path=\"/login\">\n              <Login />\n            </Route>\n            <Route exact path=\"/signup\">\n              <Signup />\n            </Route>\n          </div>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorkerRegistration.register();"],"sourceRoot":""}